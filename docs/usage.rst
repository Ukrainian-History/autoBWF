Usage
=======

Basic usage
++++++++++++
Simply type ::

    autoBWF

on the command line, and use the GUI "Open" menu item to load your WAVE file.

Alternatively, you can avoid the "Open" dialog by specifying the target file and (optional) template file
on the command line::

    autoBWF <target_filename> [-t <template_filename>]

``autoBWF`` will prepopulate the Description, Originator, OriginationDate, OriginationTime, and OriginatorRef
GUI elements with reasonable guesses as described below.

If *target_filename* already contains BWF metadata, then those values will appear in the GUI in grey italic text.
If the user edits those fields, the text color will change to red as a warning that "Save metadata" will cause
those the values will be overwritten in the target file. **This cannot be undone!**

.. note::
    It is strongly recommended that you work with test files and confirm (using BWFMetaEdit and/or a metadata viewer
    like ``exiftool``) that ``autoBWF`` is behaving the way that you expect before working with master files.


The CodingHistory text is generated automatically based on the selections made in the drop-downs to the right of the
text box and the values in the configuration file (see below). Similarly, the Copyright text is replaced
with the boilerplate corresponding to the dropdown menu selection.

.. note::
    You can edit those text manually prior to saving, but be aware that
    using the drop-down menus will destroy any manual edits that you have made.

Template files
+++++++++++++++++

autoBWF supports the transfer of metadata embedded in one file (the "template" file) to the target file.
This can be done either by clicking on the "Load Template" button, or by using the optional ``-t`` command line
argument::

    autoBWF <target_filename> -t <template_filename>

This will prepopulate the contents of the Title, Technician, Source, Copyright, Coding History, and all XMP data
fields with the corresponding metadata contained in *template_filename*. These can always be edited before saving the
metadata to the target file. Note that if the target file already has metadata in the same fields as the template,
then this could result in the overwriting of data. `This issue <https://github.com/Ukrainian-History/autoBWF/
issues/2>`_ will be resolved in a future version.

How does autoBWF generate the metadata?
++++++++++++++++++++++++++++++++++++++++

From filenames
-----------------
autoBWF was designed assuming that filenames follow a convention similar to that used by the Indiana University
Archives of Traditional Music as described in the `"Sound Directions" report
<http://www.dlib.indiana.edu/projects/sounddirections/papersPresent/index.shtml>`_. It uses a regular expression
("regex") to parse the filename and extract components (called "capture groups") for use in generating the
Description and OriginationDate BWF fields. This regex is specified in the configuration JSON file,
see :ref:`program_behavior`.

Specifically, autoBWF expects that the regex has capture groups for the following three pieces of data:

- an item-level identifier of the physical instantiation corresponding to this digital object in arbitrary format
- a file use indicator
- the date of file creation in hyphenless ISO 8601 format

These data must occur in that order within the filename. The file use indicator is translated into natural language
using the "fileuse" element in the JSON configuration file, see :ref:`program_behavior`.

If autoBWF cannot parse the filename, then it will display a warning, use the OS file creation date and
time to generate OriginationDate, OriginationTime, and OriginatorRef, and will leave Description blank.

If the naming convention at your archives is different enough from the above that it cannot be accomodated by
modification of the regex, then that will require modifications to the Python codebase. If the modifications can be
made without significant rewriting, then you may be able to talk the maintainer of the project into making
the changes. Please create an "issue" on GitHub describing your needs, and let's talk about it! If you want to
make substantial local modifications, feel free to fork the project.


From operating system metadata
--------------------------------

The values of OriginationTime and OriginatorRef are generated by combining
the file creation dates and times obtained from OS metadata together with
default values in ``autobwfconfig.json``. If there is a conflict between the OS metadata date and that in
the filename, then the program will display a warning and will allow you to choose which one you want to use.